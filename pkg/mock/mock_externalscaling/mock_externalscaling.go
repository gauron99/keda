// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/externalscaling/api/externalCalculation_grpc.pb.go

// Package mock_externalscaling is a generated GoMock package.
package mock_externalscaling

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	externalCalculation "github.com/kedacore/keda/v2/pkg/externalscaling/api"
	grpc "google.golang.org/grpc"
)

// MockExternalCalculationClient is a mock of ExternalCalculationClient interface.
type MockExternalCalculationClient struct {
	ctrl     *gomock.Controller
	recorder *MockExternalCalculationClientMockRecorder
}

// MockExternalCalculationClientMockRecorder is the mock recorder for MockExternalCalculationClient.
type MockExternalCalculationClientMockRecorder struct {
	mock *MockExternalCalculationClient
}

// NewMockExternalCalculationClient creates a new mock instance.
func NewMockExternalCalculationClient(ctrl *gomock.Controller) *MockExternalCalculationClient {
	mock := &MockExternalCalculationClient{ctrl: ctrl}
	mock.recorder = &MockExternalCalculationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternalCalculationClient) EXPECT() *MockExternalCalculationClientMockRecorder {
	return m.recorder
}

// Calculate mocks base method.
func (m *MockExternalCalculationClient) Calculate(ctx context.Context, in *externalCalculation.MetricsList, opts ...grpc.CallOption) (*externalCalculation.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Calculate", varargs...)
	ret0, _ := ret[0].(*externalCalculation.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Calculate indicates an expected call of Calculate.
func (mr *MockExternalCalculationClientMockRecorder) Calculate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Calculate", reflect.TypeOf((*MockExternalCalculationClient)(nil).Calculate), varargs...)
}

// MockExternalCalculationServer is a mock of ExternalCalculationServer interface.
type MockExternalCalculationServer struct {
	ctrl     *gomock.Controller
	recorder *MockExternalCalculationServerMockRecorder
}

// MockExternalCalculationServerMockRecorder is the mock recorder for MockExternalCalculationServer.
type MockExternalCalculationServerMockRecorder struct {
	mock *MockExternalCalculationServer
}

// NewMockExternalCalculationServer creates a new mock instance.
func NewMockExternalCalculationServer(ctrl *gomock.Controller) *MockExternalCalculationServer {
	mock := &MockExternalCalculationServer{ctrl: ctrl}
	mock.recorder = &MockExternalCalculationServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternalCalculationServer) EXPECT() *MockExternalCalculationServerMockRecorder {
	return m.recorder
}

// Calculate mocks base method.
func (m *MockExternalCalculationServer) Calculate(arg0 context.Context, arg1 *externalCalculation.MetricsList) (*externalCalculation.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Calculate", arg0, arg1)
	ret0, _ := ret[0].(*externalCalculation.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Calculate indicates an expected call of Calculate.
func (mr *MockExternalCalculationServerMockRecorder) Calculate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Calculate", reflect.TypeOf((*MockExternalCalculationServer)(nil).Calculate), arg0, arg1)
}

// mustEmbedUnimplementedExternalCalculationServer mocks base method.
func (m *MockExternalCalculationServer) mustEmbedUnimplementedExternalCalculationServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedExternalCalculationServer")
}

// mustEmbedUnimplementedExternalCalculationServer indicates an expected call of mustEmbedUnimplementedExternalCalculationServer.
func (mr *MockExternalCalculationServerMockRecorder) mustEmbedUnimplementedExternalCalculationServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedExternalCalculationServer", reflect.TypeOf((*MockExternalCalculationServer)(nil).mustEmbedUnimplementedExternalCalculationServer))
}

// MockUnsafeExternalCalculationServer is a mock of UnsafeExternalCalculationServer interface.
type MockUnsafeExternalCalculationServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeExternalCalculationServerMockRecorder
}

// MockUnsafeExternalCalculationServerMockRecorder is the mock recorder for MockUnsafeExternalCalculationServer.
type MockUnsafeExternalCalculationServerMockRecorder struct {
	mock *MockUnsafeExternalCalculationServer
}

// NewMockUnsafeExternalCalculationServer creates a new mock instance.
func NewMockUnsafeExternalCalculationServer(ctrl *gomock.Controller) *MockUnsafeExternalCalculationServer {
	mock := &MockUnsafeExternalCalculationServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeExternalCalculationServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeExternalCalculationServer) EXPECT() *MockUnsafeExternalCalculationServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedExternalCalculationServer mocks base method.
func (m *MockUnsafeExternalCalculationServer) mustEmbedUnimplementedExternalCalculationServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedExternalCalculationServer")
}

// mustEmbedUnimplementedExternalCalculationServer indicates an expected call of mustEmbedUnimplementedExternalCalculationServer.
func (mr *MockUnsafeExternalCalculationServerMockRecorder) mustEmbedUnimplementedExternalCalculationServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedExternalCalculationServer", reflect.TypeOf((*MockUnsafeExternalCalculationServer)(nil).mustEmbedUnimplementedExternalCalculationServer))
}
